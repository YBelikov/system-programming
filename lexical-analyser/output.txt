KEYWORD				func
IDENTIFIER				ReverseRunes
OPEN_PARENTHESIS				(
IDENTIFIER				s
DATA_TYPE				string
CLOSE_PARENTHESIS				)
DATA_TYPE				string
OPEN_CURLY_BRACE				{
IDENTIFIER				r
ASSIGNMENT_WITH_DEDUCTION				:=
OPEN_SQUARE_BRACE				[
CLOSE_SQUARE_BRACE				]
IDENTIFIER				rune
OPEN_PARENTHESIS				(
IDENTIFIER				s
CLOSE_PARENTHESIS				)
IDENTIFIER				x
ASSIGNMENT_WITH_DEDUCTION				:=
STRING_LITERAL				"авеф"
LEXICAL_ERROR				$@#@!
IDENTIFIER				u
ASSIGNMENT				=
FLOATING_POINT_LITERAL				2.2121
SEMICOLON				;
IDENTIFIER				l
ASSIGNMENT_WITH_DEDUCTION				:=
INTEGER_LITERAL				1231
LEXICAL_ERROR				$@##@
KEYWORD				for
IDENTIFIER				i
COMA				,
IDENTIFIER				j
ASSIGNMENT_WITH_DEDUCTION				:=
INTEGER_LITERAL				0
COMA				,
IDENTIFIER				len
OPEN_PARENTHESIS				(
IDENTIFIER				r
CLOSE_PARENTHESIS				)
MINUS				-
INTEGER_LITERAL				1
SEMICOLON				;
IDENTIFIER				i
LESS				<
IDENTIFIER				len
OPEN_PARENTHESIS				(
IDENTIFIER				r
CLOSE_PARENTHESIS				)
DIVISION				/
INTEGER_LITERAL				2
SEMICOLON				;
IDENTIFIER				i
COMA				,
IDENTIFIER				j
ASSIGNMENT				=
IDENTIFIER				i
PLUS				+
INTEGER_LITERAL				1
COMA				,
IDENTIFIER				j
MINUS				-
INTEGER_LITERAL				1
OPEN_CURLY_BRACE				{
IDENTIFIER				r
OPEN_SQUARE_BRACE				[
IDENTIFIER				i
CLOSE_SQUARE_BRACE				]
COMA				,
IDENTIFIER				r
OPEN_SQUARE_BRACE				[
IDENTIFIER				j
CLOSE_SQUARE_BRACE				]
ASSIGNMENT				=
IDENTIFIER				r
OPEN_SQUARE_BRACE				[
IDENTIFIER				j
CLOSE_SQUARE_BRACE				]
COMA				,
IDENTIFIER				r
OPEN_SQUARE_BRACE				[
IDENTIFIER				i
CLOSE_SQUARE_BRACE				]
SEMICOLON				;
CLOSE_CURLY_BRACE				}
KEYWORD				return
DATA_TYPE				string
OPEN_PARENTHESIS				(
IDENTIFIER				r
CLOSE_PARENTHESIS				)
SEMICOLON				;
CLOSE_CURLY_BRACE				}
